- Application notes for self \*

# Libraries installed

- @supabase/ssr(server side rendering) : for database and backend handling
- @dnd-kit/core, @dnd-kit/sortable, @dnd-kit/utilities : for the drag and drop feature
- @radix-ui/react-dialog : dialog in app
- @radix-ui/react-label, @radix-ui/react-select, @radix-ui/react-slot
- lucide-react : for icons
- class-variance-authority : required by shadcn to use with radix for compability reasons
- tailwind-merge, clsx : prevent Tailwind class names from getting too big
- @clerk/nextjs : for authentication and billing
- tw-animate-css :
- shadcn : ui prewritten React components
  - added badge, button, card, dialog, input, label, select, textarea components

# .env file

- contains API keys from clerk account

# middleware.ts

- per clerk instructions this file enables authentication and is where you'll configure your protected routes

# ClerkProvider

- The ClerkProvidercomponent provides Clerk's authentication context to the app. It's recommended to wrap the entire app at the entry point with ClerkProvider to make authentication globally accessible
  see: app > layout.tsx

# SignInButton and SignUpButton

- these components from clerk handle the authentication and onclick functionality of a shadcn Button component
  see: navbar.tsx

# useUser hook

- hook from clerk that holds information about the user such as knowing if the user is logged in or not
  see: navbar.tsx

# pathname hook

- tells us on which path the user is in, that way we can hide certain elements in the navbar depending on where the user is, ex: no need to have the Go to Dashboard button when the user is already in the dashboard page
  see: navbar.tsx

# models.ts

- this file translates the tables (boards, columns, tasks) from supabase into typescript table types
  see: lib > supabase > models.ts

# client.ts

- this file in supabase folder, will export a supabase instance that is accessible in our client component. ex: createBrowserClient is a supabase function from the client part in supabase
  see : lib > supabase > client.ts

# server.ts

- this file is similar to client.ts except it is for the server. the code from these files is found in supabase docs
  see: lib > supabase > server.ts

# services.ts

- contains all CRUD operations of a board
  see: lib > supabase > services.ts

# createBoard(services.ts) vs createBoard(useBoards.ts)

- not the same functions
- createBoard in services.ts, creates the board itself in supabase but has no columns
- createBoard in useBoards.ts, creates default columns with the board

# boardDataService

- contains functions that operate with more than one services. ex: createBoardWithDefaultColumns operates the boardService and columnService
